{"src/index.js":{"hash":"2f0038e480b14d8aefa4058365397691","res":{"results":[{"filePath":"/Users/bentindall/Documents/Sounder/frontEnd/src/index.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/App.js":{"hash":"114c5de0f6f9fc1bec6e452cd1942d4d","res":{"results":[{"filePath":"/Users/bentindall/Documents/Sounder/frontEnd/src/App.js","messages":[{"ruleId":"react/jsx-equals-spacing","severity":1,"message":"There should be no space before '='","line":321,"column":106,"nodeType":"JSXAttribute","source":"        <HomePage clickMatch={(match)=>this.clickMatch(match)} matchlist={this.state.matches} matchTimes = {this.state.matchTimes}  currentLogin={this.state.currentLogin} />","fix":{"range":[9831,9832],"text":""}},{"ruleId":"react/jsx-equals-spacing","severity":1,"message":"There should be no space after '='","line":321,"column":106,"nodeType":"JSXAttribute","source":"        <HomePage clickMatch={(match)=>this.clickMatch(match)} matchlist={this.state.matches} matchTimes = {this.state.matchTimes}  currentLogin={this.state.currentLogin} />","fix":{"range":[9833,9834],"text":""}},{"ruleId":"react/jsx-equals-spacing","severity":1,"message":"There should be no space before '='","line":351,"column":89,"nodeType":"JSXAttribute","source":"                            updateSettings={(obj)=>this.updateSettings(obj)} matchTimes = {this.state.matchTimes} />","fix":{"range":[11019,11020],"text":""}},{"ruleId":"react/jsx-equals-spacing","severity":1,"message":"There should be no space after '='","line":351,"column":89,"nodeType":"JSXAttribute","source":"                            updateSettings={(obj)=>this.updateSettings(obj)} matchTimes = {this.state.matchTimes} />","fix":{"range":[11021,11022],"text":""}}],"errorCount":0,"warningCount":4,"source":"/*\n  App.js\n\n  App is the top-level component of our application. It is responsible for managing the data collection.\n\n  App maintains state in the form of mode, currentLogin, currentMatch, matches, and futureMatches.\n  -mode determines which page is being displayed.\n  -currentLogin is an object that stores the account information for the person who is currently logged in.\n  -currentMatch is an object that stores the account information of the person that will be dispalyed in MatchDetailPage\n  -matches is an array of objects that store the acccount information of the artists that currentLogin has matched with\n  -futureMatches is an array of objects that store the acccount information of the artists that currentLogin could potentially match with\n  -likes is an array with all the likes in the database\n\n  */\n\nimport React, { Component } from 'react';\nimport MatchPage from './Components/MatchPage.js';\nimport HomePage from './Components/HomePage.js';\nimport LoginPage from './Components/LoginPage.js';\nimport SignUpPage from './Components/SignUpPage.js';\nimport MatchingSettingsPage from './Components/MatchingSettingsPage.js';\nimport MatchDetailPage from './Components/MatchDetailPage.js';\nimport NavBar from './Components/NavBar.js';\n\n\nconst SERVER = 'http://localhost:4321';\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      mode: 'login',\n      currentLogin: null,\n      futureMatches: [],\n      currentMatch: null,\n      matches: [],\n      likes: null\n    }\n\n      this.updateUsers();\n      this.updateLikes();\n\n}\n\n\n/*next on list of things to do, is manual enter stuff, so that ther is no IDt*/\ncreateNewUser(newUserObj){\n  let userData = {}\n  userData.username = newUserObj.username;\n  userData.numFollowers = newUserObj.numFollowers;\n  userData.profilepictureURL = newUserObj.profilePictureURL;\n  userData.karma = newUserObj.karma;\n  userData.profileURL = newUserObj.profileURL;\n  userData.followerRangeMin = 0;\n  userData.followerRangeMax = 100000000;\n  userData.genre = newUserObj.genre.join();\n  console.log(userData.genre);\n  userData.online = 0;\n  userData.song1 = newUserObj.song1;\n  userData.song2 = newUserObj.song2;\n  userData.song3 = newUserObj.song3;\n  console.log(userData);\n  const userStr = JSON.stringify(userData);\n  const request = new Request(\n  SERVER + \"/sounder/users/\" ,\n  {\n    method:'POST',\n    body: userStr,\n    headers: new Headers({'Content-type': 'application/json'})\n  }\n  );\n\n  fetch(request)\n  .then((response)=>{\n    if (response.ok){\n      this.updateUsers();\n      return response.json();\n    }\n  })\n  .then((response)=>{\n\n    let tempObj = Object.assign({}, newUserObj, {id : response[0]});\n    this.setState({currentLogin: tempObj, mode: 'home'});\n    console.log(\"new User created \" + newUserObj + \" with username \" + newUserObj.username + \" and password \" + newUserObj.password);\n    this.loadMatches(tempObj.id);\n  });\n}\n\naddLike(user_id, liked_id){\n  let likeData = {}\n  likeData.user_id = user_id;\n  likeData.liked_id = liked_id;\n  const likeStr = JSON.stringify(likeData);\n  const request = new Request(\n    SERVER + \"/sounder/likes\",\n    {\n      method: 'POST',\n      body: likeStr,\n      headers: new Headers({'Content-type': 'application/json'})\n    }\n  );\n\n  fetch(request)\n  .then((response)=>{\n    if (response.ok){\n      return response.json();\n    }\n  })\n  .then(()=>{\n    this.updateLikes();\n  })\n}\n\n/*retrieves all the data in the likes table*/\nupdateLikes(){\n  fetch(SERVER + '/sounder/likes/')\n        .then((response)=>{\n          if (response.ok){\n            return response.json();\n          }\n        })\n        .then((data)=>{\n          this.setState({likes: data});\n        });\n}\n/*retrieves all the data from the users table*/\nupdateUsers(){\n  fetch(SERVER + '/sounder/users/')\n        .then((response)=>{\n          if (response.ok){\n            return response.json();\n          }\n        })\n        .then((data)=>{\n          this.setState({data: data});\n          //this.setState({futureMatches: data});\n        });\n}\n\n/*given a user id, this function retrieves all the people that that user has matched with\n invokes the getMatches function to do most of the work */\nloadMatches(id){\n  fetch(SERVER + '/sounder/matches/' + id)\n        .then((response)=>{\n          if (response.ok){\n            return response.json();\n          }\n        })\n        .then((data)=>{\n          this.getMatches(id, data);\n        })\n}\n\n/*getMatches is a helper function for loadMatches\n it sets the state of matches and futureMatches\n*/\ngetMatches(id, matchData){\n  let matchArray = [];\n  let objArray = [];\n  let futureMatchArray = [];\n  let timeOfMatches = {};\n  for (let match of matchData) {\n    let times = [];\n    if(match.matched_id !== id){\n      matchArray.push(match.matched_id);\n      times.push(match.matchTime);\n      times.push(match.matchTimeInt);\n      timeOfMatches[match.matched_id] = times;\n    } else{\n      matchArray.push(match.user_id);\n      times.push(match.matchTime);\n      times.push(match.matchTimeInt);\n      timeOfMatches[match.user_id] = times;\n    }\n\n  }\n  var sortedMatchIdArray = Object.keys(timeOfMatches).map(function(key) {\n      return [key, timeOfMatches[key][1]];\n  });\n\n  // Sort the array based on the second element\n  sortedMatchIdArray.sort(function(first, second) {\n      return second[1] - first[1];\n  });\n  for (let matchid of sortedMatchIdArray) {\n    for (let user of this.state.data){\n      if (matchid[0] === String(user.id)) {\n        objArray.push(user);\n      }\n    }\n  }\n  for (let user of this.state.data){\n    if((matchArray.indexOf(user.id) < 0) &&(user.id !== id)){\n      futureMatchArray.push(user);\n    }\n  }\n  this.setState({matches: objArray});\n  this.setState({futureMatches: futureMatchArray});\n  this.setState({matchTimes: timeOfMatches});\n}\n\n\n/* adds a match (currentLogin.id & matched_id) to the match table */\naddMatch(matched_id){\n  let matchData = {}\n  matchData.user_id = this.state.currentLogin.id;\n  matchData.matched_id = matched_id;\n  const now = new Date();\n  matchData.matchTime = String(now).slice(4,15);\n  matchData.matchTimeInt = now.getTime();\n  console.log(\"here is the time:\");\n  console.log(matchData.matchTime);\n  console.log(matchData.matchTimeInt);\n  const matchStr = JSON.stringify(matchData);\n  const request = new Request(\n    SERVER + \"/sounder/matches\",\n    {\n      method: 'POST',\n      body: matchStr,\n      headers: new Headers({'Content-type': 'application/json'})\n    }\n  );\n\n  fetch(request)\n  .then((response)=>{\n    if (response.ok){\n      return response.json();\n    }\n    }).then((data)=>{\n    this.loadMatches(this.state.currentLogin.id);\n  });\n}\n\n/*adds a like (currentLogin.id likes liked_id) to the likes table*/\n  handleLike(liked_id){\n    this.addLike(this.state.currentLogin.id, liked_id)\n\n  }\n\n\n  /*handleSignIn is a function that is turned on when someone tries to sign in. If the username is in the database, it changes the state of currentLogin to\n  match this username. It also will update the state to be the home page. */\n  handleSignIn(username){\n    for (let profile of this.state.data){\n      if (profile.username === username){ //we also need to now check password here\n        this.setState({currentLogin: profile});\n        this.loadMatches(profile.id);\n        this.setState({mode: 'home'});\n        return;\n      }\n    }\n    alert(\"This is not a valid user! Please try again.\");\n  }\n\n/* handle signUp will be called when a new user tries to sign up, if the username is in data, it will\n   return nothing and LoginPage will throw an error to the user, if the username is not in data, it will\n   create a new user with username and password*/\n  handleSignUp(newUserObj){\n      let alreadyThere = false\n      for (let profile of this.state.data){\n          if (profile.username === newUserObj.username){\n              alert(\"This username is already taken! Please enter a different one.\");\n              alreadyThere = true\n              return;\n          }\n      }\n      if (alreadyThere === false){\n        this.createNewUser(newUserObj);\n      }\n  }\n\n  /*handleLogOut is a function that is turned on when someone tries to log out. It updates the state of currentLogin to be null.\n  It updates the mode to be the login page. */\n  handleLogOut(){\n      this.setState({currentLogin:null, matches: [], mode: 'login'});\n      /*reload the page*/\n      location.reload(true);\n    }\n\n/*clickMatch is a callback function that is turned on when a match in the matchlog is clicked. It changes the state of currentMatch and the mode. */\n  clickMatch(match){\n    if(this.state.mode === 'home'){\n      this.setState({mode: 'matchdetails'})\n    }\n    this.setState({currentMatch: match});\n  }\n\n  /*callback function in MatchingSettings page, replaces old user object with updated objected with updated settings*/\n  updateSettings(updatedUserObj){\n    this.setState({currentLogin:updatedUserObj})\n\n\n    const userStr = JSON.stringify(updatedUserObj);\n    const request = new Request(\n    SERVER + \"/sounder/users/\" + updatedUserObj.id ,\n    {\n      method:'PUT',\n      body: userStr,\n      headers: new Headers({'Content-type': 'application/json'})\n    }\n    );\n\n    fetch(request)\n    .then((response)=>{\n      if (response.ok){\n        this.updateUsers();\n        return response.json();\n      }\n    });\n  }\n  /*The following determines which page should be displayed based on what the state of mode is. */\n\n  render() {\n\n    if(this.state.mode ==='home' && this.state.matches && this.state.matchTimes){\n      console.log(this.state.matchTimes);\n      return (\n        <div className=\"App\">\n        <NavBar setMode={(whichMode)=>this.setState({mode: whichMode})} handleLogOut={()=>this.handleLogOut()}/>\n        <HomePage clickMatch={(match)=>this.clickMatch(match)} matchlist={this.state.matches} matchTimes = {this.state.matchTimes}  currentLogin={this.state.currentLogin} />\n        </div>\n      );\n    }\n    if(this.state.mode ==='login'){\n      return (\n        <div className=\"App\">\n\n          <LoginPage setProfile={(username)=>this.handleSignIn(username)} newUser={(username,password)=>this.handleSignUp(username,password)} switchToSignUp={()=>this.setState({mode: 'signUp'})}/>\n        </div>\n      );\n    };\n\n    if(this.state.mode ==='signUp'){\n      return (\n        <div className=\"App\">\n\n          <SignUpPage newUser={(obj)=>this.handleSignUp(obj)} switchToLogin={()=>this.setState({mode: 'login'})}/>\n        </div>\n      );\n    };\n\n    if(this.state.mode === 'matchdetails' && this.state.matchTimes){\n      return (\n        <div>\n        <NavBar setMode={(whichMode)=>this.setState({mode: whichMode})} handleLogOut={()=>this.handleLogOut()}/>\n\n          <MatchDetailPage clickMatch={(match)=>this.clickMatch(match)}\n                            matchlist={this.state.matches} currentMatch={this.state.currentMatch}\n                            setMode={(article)=>this.setState({mode:'home'})}\n                            updateSettings={(obj)=>this.updateSettings(obj)} matchTimes = {this.state.matchTimes} />\n        </div>\n      );\n    };\n\n    if(this.state.mode==='settings'){\n      return (\n        <div className=\"App\">\n        <NavBar setMode={(whichMode)=>this.setState({mode: whichMode})} handleLogOut={()=>this.handleLogOut()}/>\n\n          <MatchingSettingsPage\n            currentLogin={this.state.currentLogin}\n            updateSettings={(obj)=>this.updateSettings(obj)}\n            setMode={(article)=>this.setState({mode:'home'})}\n          />\n        </div>\n      );\n    }\n    else {\n      return (\n      <div>\n      <NavBar setMode={(whichMode)=>this.setState({mode: whichMode})} handleLogOut={()=>this.handleLogOut()}/>\n\n      <MatchPage returnMatch={(matched_id)=>this.addMatch(matched_id)} likeData={this.state.likes} returnLike={(liked_id)=>this.handleLike(liked_id)} currentLogin={this.state.currentLogin} futureMatches={this.state.futureMatches} setMode={(article)=>this.setState({mode:'home'})}/>\n      </div>\n      );\n    }\n  }\n}\n\nexport default App;\n"}],"errorCount":0,"warningCount":4}},"src/Components/LoginPage.js":{"hash":"036c2044cc0063690d94b64a88dbe425","res":{"results":[{"filePath":"/Users/bentindall/Documents/Sounder/frontEnd/src/Components/LoginPage.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Select' is defined but never used.","line":13,"column":8,"nodeType":"Identifier","source":"import Select from 'react-select';"}],"errorCount":0,"warningCount":1,"source":"/*\n  LoginPage.js\n\n  This provides the implementation for the login component.\n\n  LoginPage maintains state in the form of username.\n\n  LoginPage has one prop: setProfile. setProfile is a callback function that updates the state in App.js of currentUser to be the username and the mode to be the home page.\n\n*/\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Select from 'react-select';\n\n\n//import Col from 'react-bootstrap/lib/Col.js';\n//import Button from 'react-bootstrap/lib/Button.js';\n\n\n\n\n\nconst LoginPage = styled.div`\n  text-align: center;\n  margin-top: 100px;\n  height: 50%;\n`;\n\nconst UsernameInput = styled.div`\n  background-color: #FF7700; /* orange  */\n  position: relative;\n  padding: 10px;\n  font-size: 16px;\n  height:50;\n  width: 300px;\n  display: inline-block;\n`;\n\n\n\nconst LoginButton = styled.div`\n  background-color: #525252; /* Green */\n  border: none;\n  color: white;\n  padding: 10px 20px 10px 20px;\n  cursor: pointer;\n  border-radius: 28px;\n  margin-right: 10px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  margin-top: 10px;\n  &:hover {\n   background-color:#FF7700;\n }\n\n`;\n\nconst SounderHeader = styled.div`\n  font-size: 3.0em;\n  font-weight: bold;\n  font-variant: small-caps;\n  color:#525252;\n`;\n\nconst Input = styled.input`\n  width:200px;\n  height:25px;\n\n`;\n\nclass Login extends Component{\n  constructor(){\n    super();\n    this.state = {\n      mode: 'login',\n      username: '',\n      password: ''\n    }\n  };\n\n\n\nhandleUsername(inputEvent){\n  this.setState({username: inputEvent.target.value});\n}\n\nhandlePassword(inputEvent){\n  this.setState({password: inputEvent.target.value});\n}\n\nrender() {\n\n\n\n  let usernameInput = (<Input  placeholder=\"Username\" type=\"text\" value={this.state.username} onChange={(event)=>{this.handleUsername(event)}}/>);\n  let passwordInput = (<Input  placeholder=\"Password\" type=\"text\" value={this.state.password} onChange={(event)=>{this.handlePassword(event)}}/>);\n  let signIn = (<LoginButton onClick={()=>this.props.setProfile(this.state.username)}>Sign In</LoginButton>);\n  let createAccount = (<LoginButton onClick={()=>{this.props.switchToSignUp(); console.log(\"go to signup!!\")}}>Create Account</LoginButton>);\n\n\n\n\n\n\n  if (this.state.mode === 'login'){\n    return(\n      <LoginPage>\n        <SounderHeader>\n        Sounder\n        </SounderHeader>\n        <UsernameInput>\n          {usernameInput}\n        </UsernameInput>\n        <div>\n          <UsernameInput>\n            {passwordInput}\n          </UsernameInput>\n        </div>\n        <div>\n          {signIn}\n          {createAccount}\n        </div>\n        </LoginPage>\n\n      );\n  }\n\n  if (this.state.mode === 'signUp'){\n    return(\n      <LoginPage>\n        <SounderHeader>\n        Sounder\n        </SounderHeader>\n        <UsernameInput>\n          {usernameInput}\n        </UsernameInput>\n        <div>\n          <UsernameInput>\n            {passwordInput}\n          </UsernameInput>\n        </div>\n        <div>\n        {signIn}\n        {createAccount}\n        </div>\n        </LoginPage>\n\n      );\n  }\n}\n}\nexport default Login;\n"}],"errorCount":0,"warningCount":1}},"src/Components/SignUpPage.js":{"hash":"e2509005bc9642f1213ae9c73909e3a6","res":{"results":[{"filePath":"/Users/bentindall/Documents/Sounder/frontEnd/src/Components/SignUpPage.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Select' is defined but never used.","line":12,"column":8,"nodeType":"Identifier","source":"import Select from 'react-select';"},{"ruleId":"array-callback-return","severity":1,"message":"Expected to return a value in this function.","line":177,"column":31,"nodeType":"FunctionExpression","source":"  Object.keys(newUserObj).map(function(key){ //checks that all fields complete"},{"ruleId":"no-unused-vars","severity":1,"message":"'genresInput' is assigned a value but never used.","line":196,"column":7,"nodeType":"Identifier","source":"  let genresInput = (<Input  placeholder=\"genre (later dropdown)\" type=\"text\" value={this.state.genres} onChange={(event)=>{this.handleGenres(event)}}/>);"},{"ruleId":"no-unused-vars","severity":1,"message":"'genre' is assigned a value but never used.","line":208,"column":7,"nodeType":"Identifier","source":"  let genre = (<DropdownButton title='Genres' id='genre-dropdown' onChange={(event)=>{this.handleGenres(event)}}>"}],"errorCount":0,"warningCount":4,"source":"/*\n  SignUpPage.js\n\n  This provides the implementation for the signUp page.\n\n\n*/\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport DropdownButton from 'react-bootstrap/lib/DropdownButton.js';\nimport MenuItem from 'react-bootstrap/lib/MenuItem.js';\nimport Select from 'react-select';\nimport MultiGenreSelect from './MultiGenreSelect.js';\n\n//import Col from 'react-bootstrap/lib/Col.js';\n\n\n\n\n\n\nconst LoginPage = styled.div`\n  text-align: center;\n  margin-top: 100px;\n  height: 50%;\n`;\n\nconst UsernameInput = styled.div`\n  background-color: #FF7700; /* orange  */\n  position: relative;\n  padding: 10px;\n  font-size: 16px;\n  height:50;\n  width: 300px;\n  display: inline-block;\n`;\n\n\n\nconst LoginButton = styled.div`\n  background-color: #525252; /* Green */\n  border: none;\n  color: white;\n  padding: 10px 20px 10px 20px;\n  cursor: pointer;\n  border-radius: 28px;\n  margin-right: 10px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  margin-top: 10px;\n  &:hover {\n   background-color:#FF7700;\n }\n\n`;\n\nconst SounderHeader = styled.div`\n  font-size: 3.0em;\n  font-weight: bold;\n  font-variant: small-caps;\n  color:#525252;\n`;\n\nconst Input = styled.input`\n  width:200px;\n  height:25px;\n\n`;\n\nclass SignUp extends Component{\n  constructor(){\n    super();\n    this.state = {\n      id: '',\n      username: '',\n      password: '',\n      song1: '',\n      song2: '',\n      song3: '',\n      profileURL: '',\n      genres: '', //make this an array later\n      numFollowers: '',\n      profilePictureURL: '',\n      email: '',\n\t\t\tvalue: []\n\n    }\n  };\n\nhandleSelectChange (value) {\n  console.log('You\\'ve selected:', value);\n  this.setState({ value });\n}\n\nhandleUsername(inputEvent){\n  this.setState({username: inputEvent.target.value});\n}\n\nhandlePassword(inputEvent){\n  this.setState({password: inputEvent.target.value});\n}\n\nhandleSong1(inputEvent){\n  this.setState({song1: inputEvent.target.value});\n}\n\nhandleSong2(inputEvent){\n  this.setState({song2: inputEvent.target.value});\n}\n\nhandleSong3(inputEvent){\n  this.setState({song3: inputEvent.target.value});\n}\n\nhandleProfileURL(inputEvent){\n  this.setState({profileURL: inputEvent.target.value});\n}\n\nhandleNumFollowers(inputEvent){\n  this.setState({numFollowers: inputEvent.target.value});\n}\n\nhandleGenres(inputEvent){ //make this an array handler later\n  this.setState({genres: inputEvent.target.value});\n}\n\nhandlePhotoURL(inputEvent){\n  this.setState({profilePictureURL: inputEvent.target.value});\n\n}\n\nhandleEmail(inputEvent){\n  this.setState({email: inputEvent.target.value});\n}\n\n\n\n\n/*\n ********************************************************************\n User Object Creation: put all standardized property conventions here\n ********************************************************************\n*/\n\ncreateUser(){ //creates the actual user object\n  let newUserObj = {\n  username: this.state.username,\n  password: this.state.password,\n  song1: this.state.song1,\n  song2: this.state.song2,\n  song3: this.state.song3,\n  profileURL: this.state.profileURL,\n  genre: [this.state.value], //make this an array later\n  numFollowers: this.state.numFollowers,\n  profilePictureURL: this.state.profilePictureURL,\n  email: this.state.email,\n  karma: 0,\n\n  /* How to handle these? */\n\n  //id:\n  //followers:\n  //id;\n  //followers: //who follows the user\n  //following: //who the user follows\n  //followerRange:\n  //peopleYouLike:\n  //peopleWhoLikedYou:\n  //currentMatches:\n  //pastMatches:\n  //online:\n  }\n\n  let complete = true;\n  Object.keys(newUserObj).map(function(key){ //checks that all fields complete\n    if (newUserObj[key] === \"\"){\n      complete = false;\n      alert(\"please fill out the \" + key + \" section\");\n    }\n  })\n  if (complete === true){\n    this.props.newUser(newUserObj);\n  }\n}\n\nrender() {\n  let usernameInput = (<Input  placeholder=\"Username\" type=\"text\" value={this.state.username} onChange={(event)=>{this.handleUsername(event)}}/>);\n  let passwordInput = (<Input  placeholder=\"Password\" type=\"text\" value={this.state.password} onChange={(event)=>{this.handlePassword(event)}}/>);\n  let song1Input = (<Input  placeholder=\"Song 1 URL\" type=\"text\" value={this.state.song1} onChange={(event)=>{this.handleSong1(event)}}/>);\n  let song2Input = (<Input  placeholder=\"Song 2 URL\" type=\"text\" value={this.state.song2} onChange={(event)=>{this.handleSong2(event)}}/>);\n  let song3Input = (<Input  placeholder=\"Song 3 URL\" type=\"text\" value={this.state.song3} onChange={(event)=>{this.handleSong3(event)}}/>);\n  let profileURLInput = (<Input  placeholder=\"Soundcloud Profile URL\" type=\"text\" value={this.state.profileURL} onChange={(event)=>{this.handleProfileURL(event)}}/>);\n  let numFollowersInput = (<Input  placeholder=\"# of SC Followers\" type=\"text\" value={this.state.numFollowers} onChange={(event)=>{this.handleNumFollowers(event)}}/>);\n  let genresInput = (<Input  placeholder=\"genre (later dropdown)\" type=\"text\" value={this.state.genres} onChange={(event)=>{this.handleGenres(event)}}/>);\n  let photoURLInput = (<Input  placeholder=\"Photo URL\" type=\"text\" value={this.state.profilePictureURL} onChange={(event)=>{this.handlePhotoURL(event)}}/>);\n  let emailInput = (<Input  placeholder=\"Email\" type=\"text\" value={this.state.email} onChange={(event)=>{this.handleEmail(event)}}/>);\n\n  let genreOps = [\"Alternative Rock\", \"Ambient\", \"Classical\", \"Country\", \"Dance & EDM\", \"Dancehall\", \"Deep House\",\n  \"Disco\", \"Drum & Bass\", \"Dubstep\", \"Electronic\", \"Folk & Singer-Songwriter\", \"Hip-Hop & Rap\", \"House\", \"Indie\", \"Jazz & Blues\", \"Latin\",\n  \"Metal\", \"Piano\", \"Pop\", \"R&B & Soul\", \"Reggae\", \"Reggaeton\", \"Rock\", \"Soundtrack\", \"Techno\", \"Trance\", \"Trap\", \"Triphop\", \"World\"]\n  let counter = 0;\n  const genrelist = (genreOps).map((genrei)=>{ //creates a genrelist that is displayed in the \"Genre\" dropdown\n    counter += 1;\n    return (<MenuItem eventKey={counter} onClick={()=>{console.log(genrei)}}> {genrei} </MenuItem>);});\n\n  let genre = (<DropdownButton title='Genres' id='genre-dropdown' onChange={(event)=>{this.handleGenres(event)}}>\n            {genrelist}\n            </DropdownButton>)\n\n\n  let signUp = (<LoginButton onClick={()=>this.createUser()}>Sign Up</LoginButton>);\n  let cancel = (<LoginButton onClick={()=>this.props.switchToLogin()} >Cancel</LoginButton>);\n\n\n    return(\n      <LoginPage>\n        <SounderHeader>\n        Sounder\n        </SounderHeader>\n        <UsernameInput>\n          {usernameInput}\n        </UsernameInput>\n\n        <div>\n          <UsernameInput>\n            {passwordInput}\n          </UsernameInput>\n        </div>\n\n        <div>\n          <UsernameInput>\n            {song1Input}\n            {song2Input}\n            {song3Input}\n          </UsernameInput>\n        </div>\n\n        <div>\n          <UsernameInput>\n            {profileURLInput}\n          </UsernameInput>\n        </div>\n\n        <div>\n          <UsernameInput>\n            {numFollowersInput}\n          </UsernameInput>\n        </div>\n\n        <div>\n          <UsernameInput>\n            <MultiGenreSelect handleSelectChange={(value)=>this.handleSelectChange(value)} value={this.state.value}/>\n          </UsernameInput>\n        </div>\n\n        <div>\n          <UsernameInput>\n            {photoURLInput}\n          </UsernameInput>\n        </div>\n\n        <div>\n          <UsernameInput>\n            {emailInput}\n          </UsernameInput>\n        </div>\n\n        <div>\n        {signUp}\n        {cancel}\n        </div>\n        </LoginPage>\n\n      );\n\n}\n}\nexport default SignUp;\n"}],"errorCount":0,"warningCount":4}},"src/Components/MatchingSettingsPage.js":{"hash":"d8356f42e57f73bbbf3f3202c9c931c3","res":{"results":[{"filePath":"/Users/bentindall/Documents/Sounder/frontEnd/src/Components/MatchingSettingsPage.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/Components/MatchPage.js":{"hash":"169113efeecb183ef3dfaa8fbb7c0358","res":{"results":[{"filePath":"/Users/bentindall/Documents/Sounder/frontEnd/src/Components/MatchPage.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/Components/HomePage.js":{"hash":"df69454f1dd284bc3ae2468b29b6f433","res":{"results":[{"filePath":"/Users/bentindall/Documents/Sounder/frontEnd/src/Components/HomePage.js","messages":[{"ruleId":"no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":32,"column":3,"nodeType":"ExpressionStatement","source":"  console.log"},{"ruleId":"react/jsx-equals-spacing","severity":1,"message":"There should be no space before '='","line":40,"column":106,"nodeType":"JSXAttribute","source":"          <MatchLog matchlist={props.matchlist} clickMatch={(match)=>props.clickMatch(match)} matchTimes ={props.matchTimes}/>","fix":{"range":[1559,1560],"text":""}}],"errorCount":0,"warningCount":2,"source":"/*\n  HomePage.js\n\n  This provides the implementation for the Home Page component.\n\n  HomePage does not maintain its own state.\n\n  HomePage takes in five props: setMode, setLogout, currentLogin, clickMatch, matchlist.\n  -currentLogin is an object that stores the account information\n  for the person who is currently logged in, this will be passed into the functional component UserDetail.\n  -clickMatch is a callback function to be passed in as props to the functional component MatchLog\n  -matchlist is an array of objects that needs to be passed into the functional component Matchlog.\n\n  HomePage uses two other functional components: UserDetail and MatchLog. UserDetail represents the user\n  profile of whoever is currently logged in. MatchLog represents the list of Artists currentLogin has already matched with.\n\n*/\n\n\nimport React from 'react';\n//import styled from 'styled-components';\nimport UserDetail from './UserDetail.js';\nimport MatchLog from './MatchLog.js';\nimport Grid from 'react-bootstrap/lib/Grid.js';\nimport Row from 'react-bootstrap/lib/Row.js';\nimport Col from 'react-bootstrap/lib/Col.js';\n//import Button from 'react-bootstrap/lib/Button.js';\nimport '../index.css';\n\nfunction HomePage(props) {\n  console.log(\"home apge\");\n  console.log\n  return (\n    <Grid>\n      <Row bsClass=\"topRow\">\n        <Col lg={9} md={9} sm={5}>\n          <UserDetail currentLogin={props.currentLogin} />\n        </Col>\n        <Col lg={3} md={3} sm={3}>\n          <MatchLog matchlist={props.matchlist} clickMatch={(match)=>props.clickMatch(match)} matchTimes ={props.matchTimes}/>\n        </Col>\n      </Row>\n    </Grid>\n\n  )\n\n}\n\nexport default HomePage;\n"}],"errorCount":0,"warningCount":2}},"src/Components/MatchDetailPage.js":{"hash":"a38fe9003148fe9aaa25619e8e4f88bb","res":{"results":[{"filePath":"/Users/bentindall/Documents/Sounder/frontEnd/src/Components/MatchDetailPage.js","messages":[{"ruleId":"react/jsx-equals-spacing","severity":1,"message":"There should be no space before '='","line":36,"column":108,"nodeType":"JSXAttribute","source":"            <MatchLog clickMatch={(match)=>props.clickMatch(match)} matchlist={props.matchlist} matchTimes ={props.matchTimes} />","fix":{"range":[1314,1315],"text":""}}],"errorCount":0,"warningCount":1,"source":"/*\n  MatchDetailPage.js\n\n  This provides the implementation for the Match Detail Page component.\n\n  MatchDetailPage does not maintain its own state.\n\n  MatchDetailPage takes in four props: clickMatch, matchlist, currentMatch, setMode\n  -clickMatch is a callback function to be passedin as props to the functional component MatchLog.\n  -matchlist is an array of objects that needs to be passed into the functional component.\n  -currentMatch is the current profile being displayed in MatchDetailPage\n  -updateSettings is a callback function that will be passed into UserDetail page\n\n  MatchDetailPage uses two other functional components: UserDetail and MatchLog. UserDetail represents the user\n  profile of whoever is currently logged in. MatchLog represents the list of Artists currentLogin has already matched with.\n\n*/\n\nimport React from 'react';\nimport UserDetail from './UserDetail.js';\nimport MatchLog from './MatchLog.js';\nimport Grid from 'react-bootstrap/lib/Grid.js';\nimport Row from 'react-bootstrap/lib/Row.js';\nimport Col from 'react-bootstrap/lib/Col.js';\n\n\n\n\n\nfunction MatchDetailPage(props){\n\n    return (\n      <Grid fluid={true}>\n        <Row bsClass=\"topRow\">\n          <Col lg={3} md={3}>\n            <MatchLog clickMatch={(match)=>props.clickMatch(match)} matchlist={props.matchlist} matchTimes ={props.matchTimes} />\n          </Col>\n          <Col lg={9} md={9}>\n            <UserDetail currentLogin={props.currentMatch} profileLink={props.currentMatch.profileURL} updateSettings={(obj)=>props.updateSettings(obj)} />\n          </Col>\n        </Row>\n      </Grid>\n    )\n\n}\n\n\nexport default MatchDetailPage;\n"}],"errorCount":0,"warningCount":1}},"src/Components/NavBar.js":{"hash":"6c159093b2699bebe652925941b48ca1","res":{"results":[{"filePath":"/Users/bentindall/Documents/Sounder/frontEnd/src/Components/NavBar.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/Components/UserDetail.js":{"hash":"7abd530c6fbbd0f763f6c3e834e784ef","res":{"results":[{"filePath":"/Users/bentindall/Documents/Sounder/frontEnd/src/Components/UserDetail.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/Components/MatchLog.js":{"hash":"e46b31ec97a6781bccfa30410786e7af","res":{"results":[{"filePath":"/Users/bentindall/Documents/Sounder/frontEnd/src/Components/MatchLog.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/Components/EmbedSong.js":{"hash":"82adc6e240fdc84163c781f6055b6446","res":{"results":[{"filePath":"/Users/bentindall/Documents/Sounder/frontEnd/src/Components/EmbedSong.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/Components/MultiGenreSelect.js":{"hash":"7454ba59ea6eacfd2d68ad4b1ad285f8","res":{"results":[{"filePath":"/Users/bentindall/Documents/Sounder/frontEnd/src/Components/MultiGenreSelect.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}}}