{"src/index.js":{"hash":"dd11872bce8f6cfc431ffec83865aa15","res":{"results":[{"filePath":"/Users/geoffreyziobro/Documents/software_dev/Sounder/frontEnd/src/index.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/App.js":{"hash":"e35ced9859efa747e281f452a6e5a270","res":{"results":[{"filePath":"/Users/jessieyorke/Documents/cs312/Sounder/frontEnd/src/App.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'styled' is defined but never used.","line":18,"column":8,"nodeType":"Identifier","source":"import styled from 'styled-components';"},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":22,"column":8,"nodeType":"Identifier","source":"import data from '../public/sounderUsers.json';"}],"errorCount":0,"warningCount":2,"source":"/*\n  App.js\n\n  App is the top-level component of our application. It is responsible for managing the data collection.\n\n  App maintains state in the form of currentLogin, mode, currentMatchIds, futureMatchesIds, currentMatch, matches, and futureMatches.\n  -currentLogin is an object that stores the account information for the person who is currently logged in.\n  -mode determines which page is being displayed.\n  -currentMatchIds is an array of ids that represent all the artists that currentLogin has matched with\n  -futureMatchesIds is an array of ids that represent all the artists that currentLogin could potentially match with\n  -currentMatch is an object that stores the account information of the person that currentLogin has matched with and the user of the profile\n  that currentLogin is looking at in MatchDetailPage\n  -matches is an array of objects that store the acccount information of the artists that currentLogin has matched with\n  -futureMatches is an array of objects that store the acccount information of the artists that currentLogin could potentially match with\n  */\n\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\n\nimport MatchPage from './Components/MatchPage.js';\nimport HomePage from './Components/HomePage.js';\nimport data from '../public/sounderUsers.json';\nimport LoginPage from './Components/LoginPage.js';\nimport SignUpPage from './Components/SignUpPage.js';\nimport MatchingSettingsPage from './Components/MatchingSettingsPage.js';\nimport MatchDetailPage from './Components/MatchDetailPage.js';\nimport NavBar from './Components/NavBar.js';\n\n\nconst SERVER = 'http://localhost:4321';\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      mode: 'login',\n      currentLogin: null,\n      currentMatchIds: [2, 13, 15, 20, 17, 18, 19, 25, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 40, 42,43],\n      futureMatches: [],\n      currentMatch: null,\n    }\n\n      this.updateUsers();\n      this.updateLikes();\n\n}\n\n\n/*next on list of things to do, is manual enter stuff, so that ther is no IDt*/\ncreateNewUser(newUserObj){\n  let userData = {}\n  userData.username = newUserObj.username;\n  userData.numFollowers = newUserObj.numFollowers;\n  userData.profilepictureURL = newUserObj.photoURL;\n  userData.karma = newUserObj.karma;\n  userData.profileURL = newUserObj.profileURL;\n  userData.genre = newUserObj.genre[0];\n  userData.followerRangeMin = 0;\n  userData.followerRangeMax = 100000000;\n  userData.online = 0;\n  userData.song1 = newUserObj.song1;\n  userData.song2 = newUserObj.song2;\n  userData.song3 = newUserObj.song3;\n  const userStr = JSON.stringify(userData);\n  const request = new Request(\n  SERVER + \"/sounder/users/\" ,\n  {\n    method:'POST',\n    body: userStr,\n    headers: new Headers({'Content-type': 'application/json'})\n  }\n  );\n\n  fetch(request)\n  .then((response)=>{\n    if (response.ok){\n      this.updateUsers();\n      return response.json();\n    }\n  })\n  .then((response)=>{\n    // ************************************************\n    // This needs to be fixed !!!!!!\n    // ************************************************\n    let tempObj = Object.assign({}, newUserObj, {id : response[0]});\n    this.setState({currentLogin: tempObj, mode: 'home'});\n    console.log(\"new User created \" + newUserObj + \" with username \" + newUserObj.username + \" and password \" + newUserObj.password);\n  });\n}\n\naddLike(user_id, liked_id){\n  let likeData = {}\n  likeData.user_id = user_id;\n  likeData.liked_id = liked_id;\n  const likeStr = JSON.stringify(likeData);\n  const request = new Request(\n    SERVER + \"/sounder/likes\",\n    {\n      method: 'POST',\n      body: likeStr,\n      headers: new Headers({'Content-type': 'application/json'})\n    }\n  );\n\n  fetch(request)\n  .then((response)=>{\n    if (response.ok){\n      return response.json();\n    }\n  })\n  .then(()=>{\n    this.updateLikes();\n  })\n}\n\n// THIS IS IMPORTANT: We need to \"refetch\" our data as it's being updated on\n// the backend if we want frontend to reflect these changes in real-time\nupdateLikes(){\n  fetch(SERVER + '/sounder/likes/')\n        .then((response)=>{\n          if (response.ok){\n            return response.json();\n          }\n        })\n        .then((data)=>{\n          this.setState({likes: data});\n        });\n}\n\nupdateUsers(){\n  fetch(SERVER + '/sounder/users/')\n        .then((response)=>{\n          if (response.ok){\n            return response.json();\n          }\n        })\n        .then((data)=>{\n          this.setState({data: data});\n          //this.setState({futureMatches: data});\n        });\n}\n\n\n\n\nloadMatches(id){\n  fetch(SERVER + '/sounder/matches/' + id)\n        .then((response)=>{\n          if (response.ok){\n            return response.json();\n          }\n        })\n        .then((data)=>{\n          this.getMatches(id, data);\n          // let matchData = this.getMatches(id, data);\n          // this.setState({matches:matchData});\n        })\n}\n\ngetMatches(id, matchData){\n  let matchArray = [];\n  let objArray = [];\n  let futureMatchArray = [];\n  for (let match of matchData) {\n    if(match.matched_id !== id){\n      matchArray.push(match.matched_id);\n    } else{\n      matchArray.push(match.user_id);\n    }\n\n  }\n  for (let matchid of matchArray) {\n    for (let user of this.state.data){\n      if (matchid === user.id) {\n        objArray.push(user);\n      }\n    }\n  }\n  for (let user of this.state.data){\n    if((matchArray.indexOf(user.id) < 0) &&(user.id !== id)){\n      futureMatchArray.push(user);\n    }\n  }\n  this.setState({matches: objArray});\n  this.setState({futureMatches: futureMatchArray});\n}\n\n\n\naddMatch(matched_id){\n  let matchData = {}\n  matchData.user_id = this.state.currentLogin.id;\n  matchData.matched_id = matched_id;\n  const matchStr = JSON.stringify(matchData);\n  const request = new Request(\n    SERVER + \"/sounder/matches\",\n    {\n      method: 'POST',\n      body: matchStr,\n      headers: new Headers({'Content-type': 'application/json'})\n    }\n  );\n\n  fetch(request)\n  .then((response)=>{\n    if (response.ok){\n      return response.json();\n    }\n    }).then((data)=>{\n    this.loadMatches(this.state.currentLogin.id);\n  });\n}\n\n  handleLike(liked_id){\n    this.addLike(this.state.currentLogin.id, liked_id)\n\n  }\n\n\n  /*handleSignIn is a function that is turned on when someone tries to sign in. If the username is in the database, it changes the state of currentLogin to\n  match this username. It also will update the state to be the home page. */\n  handleSignIn(username){\n    for (let profile of this.state.data){\n      if (profile.username === username){ //we also need to now check password here\n        this.setState({currentLogin: profile});\n        this.loadMatches(profile.id);\n        this.setState({mode: 'home'});\n        return;\n      }\n    }\n    alert(\"This is not a valid user! Please try again.\");\n  }\n\n/* handle signUp will be called when a new user tries to sign up, if the username is in data, it will\n   return nothing and LoginPage will throw an error to the user, if the username is not in data, it will\n   create a new user with username and password*/\n  handleSignUp(newUserObj){\n      let alreadyThere = false\n      for (let profile of this.state.data){\n          if (profile.username === newUserObj.username){\n              alert(\"This username is already taken! Please enter a different one.\");\n              console.log(\"this user already exists\")\n              alreadyThere = true\n              return;\n          }\n      }\n      if (alreadyThere === false){\n\n        this.createNewUser(newUserObj);\n        //this.setState({currentLogin: newUserObj, mode: 'home'});\n        //console.log(\"new User created \" + newUserObj + \" with username \" + newUserObj.username + \" and password \" + newUserObj.password);\n      }\n  }\n\n  /*handleLogOut is a function that is turned on when someone tries to log out. It updates the state of currentLogin to be null.\n  It updates the mode to be the login page. */\n  handleLogOut(){\n      this.setState({currentLogin:null, mode:'login'});\n    }\n\n/*clickMatch is a callback function that is turned on when a match in the matchlog is clicked. It changes the state of currentMatch and the mode. */\n  clickMatch(match){\n    if(this.state.mode === 'home'){\n      this.setState({mode: 'matchdetails'})\n    }\n    this.setState({currentMatch: match});\n  }\n\n  /*callback function in MatchingSettings page, replaces old user object with updated objected with updated settings*/\n  updateSettings(updatedUserObj){\n    console.log(updatedUserObj);\n    this.setState({currentLogin:updatedUserObj})\n\n\n    const userStr = JSON.stringify(updatedUserObj);\n    const request = new Request(\n    SERVER + \"/sounder/users/\" + updatedUserObj.id ,\n    {\n      method:'PUT',\n      body: userStr,\n      headers: new Headers({'Content-type': 'application/json'})\n    }\n    );\n\n    fetch(request)\n    .then((response)=>{\n      if (response.ok){\n        this.updateUsers();\n        return response.json();\n      }\n    });\n  }\n  /*The following determines which page should be displayed based on what the state of mode is. */\n\n  render() {\n    if(this.state.mode ==='home' && this.state.matches){\n      return (\n        <div className=\"App\">\n        <NavBar setMode={(whichMode)=>this.setState({mode: whichMode})}/>\n        <HomePage clickMatch={(match)=>this.clickMatch(match)} matchlist={this.state.matches}  setLogout={()=>this.handleLogOut()} currentLogin={this.state.currentLogin} setMode={(whichMode)=>this.setState({mode: whichMode})}/>\n        </div>\n      );\n    }\n    if(this.state.mode ==='login'){\n      return (\n        <div className=\"App\">\n\n          <LoginPage setProfile={(username)=>this.handleSignIn(username)} newUser={(username,password)=>this.handleSignUp(username,password)} switchToSignUp={()=>this.setState({mode: 'signUp'})}/>\n        </div>\n      );\n    };\n\n    if(this.state.mode ==='signUp'){\n      return (\n        <div className=\"App\">\n\n          <SignUpPage newUser={(obj)=>this.handleSignUp(obj)} switchToLogin={()=>this.setState({mode: 'login'})}/>\n        </div>\n      );\n    };\n\n    if(this.state.mode === 'matchdetails'){\n      return (\n        <div>\n        <NavBar setMode={(whichMode)=>this.setState({mode: whichMode})}/>\n\n          <MatchDetailPage clickMatch={(match)=>this.clickMatch(match)} matchlist={this.state.matches} currentMatch={this.state.currentMatch} setMode={(article)=>this.setState({mode:'home'})} />\n        </div>\n      );\n    };\n\n    if(this.state.mode==='settings'){\n      console.log(this.state.currentLogin);\n      return (\n        <div className=\"App\">\n        <NavBar setMode={(whichMode)=>this.setState({mode: whichMode})}/>\n\n          <MatchingSettingsPage\n            currentLogin={this.state.currentLogin}\n            updateSettings={(obj)=>this.updateSettings(obj)}\n            setMode={(article)=>this.setState({mode:'home'})}\n          />\n        </div>\n      );\n    }\n    else {\n      return (\n      <div>\n      <NavBar setMode={(whichMode)=>this.setState({mode: whichMode})}/>\n\n      <MatchPage returnMatch={(matched_id)=>this.addMatch(matched_id)} likeData={this.state.likes} returnLike={(liked_id)=>this.handleLike(liked_id)} currentLogin={this.state.currentLogin} futureMatches={this.state.futureMatches} setMode={(article)=>this.setState({mode:'home'})}/>\n      </div>\n      );\n    }\n  }\n}\n\nexport default App;\n"}],"errorCount":0,"warningCount":2}},"src/Components/HomePage.js":{"hash":"90aef307410370b0961fb948c31ca2b5","res":{"results":[{"filePath":"/Users/jessieyorke/Documents/cs312/Sounder/frontEnd/src/Components/HomePage.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Component' is defined but never used.","line":23,"column":17,"nodeType":"Identifier","source":"import React, { Component } from 'react';"},{"ruleId":"no-unused-vars","severity":1,"message":"'styled' is defined but never used.","line":24,"column":8,"nodeType":"Identifier","source":"import styled from 'styled-components';"},{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used.","line":30,"column":8,"nodeType":"Identifier","source":"import Button from 'react-bootstrap/lib/Button.js';"},{"ruleId":"no-unused-vars","severity":1,"message":"'NavBar' is defined but never used.","line":31,"column":8,"nodeType":"Identifier","source":"import NavBar from './NavBar.js';"}],"errorCount":0,"warningCount":4,"source":"/*\n  HomePage.js\n\n  This provides the implementation for the Home Page component.\n\n  HomePage does not maintain its own state.\n\n  HomePage takes in five props: setMode, setLogout,currentLogin, clickMatch, matchlist.\n  -setMode is a callback that updates the state of mode in App.js.\n  -setLogout is a function that updates the state of mode and currentLogin in App.js\n  -currentLogin is an object that stores the account information\n  for the person who is currently logged in, this will be passed into the functional component UserDetail.\n  -clickMatch is a callback function to be passed\n  in as props to the functional component MatchLog\n  -matchlist is an array of objects that needs to be passed into the functional component Matchlog.\n\n  HomePage uses two other functional components: UserDetail and MatchLog. UserDetail represents the user\n  profile of whoever is currently logged in. MatchLog represents the list of Artists currentLogin has already matched with.\n\n*/\n\n\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport UserDetail from './UserDetail.js';\nimport MatchLog from './MatchLog.js';\nimport Grid from 'react-bootstrap/lib/Grid.js';\nimport Row from 'react-bootstrap/lib/Row.js';\nimport Col from 'react-bootstrap/lib/Col.js';\nimport Button from 'react-bootstrap/lib/Button.js';\nimport NavBar from './NavBar.js';\nimport '../index.css';\n\nfunction HomePage(props) {\n\n  return (\n    <Grid>\n      <Row bsClass=\"topRow\">\n        <Col lg={9}>\n          <UserDetail currentLogin={props.currentLogin} />\n        </Col>\n        <Col lg={3}>\n          <MatchLog matchlist={props.matchlist} clickMatch={(match)=>props.clickMatch(match)}/>\n        </Col>\n      </Row>\n    </Grid>\n\n  )\n\n}\n\nexport default HomePage;\n"}],"errorCount":0,"warningCount":4}},"src/Components/MatchPage.js":{"hash":"e09f857e25c4f13ad2f324911b1f6c82","res":{"results":[{"filePath":"/Users/jessieyorke/Documents/cs312/Sounder/frontEnd/src/Components/MatchPage.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'styled' is defined but never used.","line":17,"column":8,"nodeType":"Identifier","source":"import styled from 'styled-components';"},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":18,"column":8,"nodeType":"Identifier","source":"import data from '../../public/sounderUsers.json';"}],"errorCount":0,"warningCount":2,"source":"/*\n  MatchPage.js\n\n  This provides the implementation for the MatchPage component.\n\n  MatchPage maintains state in the form of futureMatchIndex\n    -futureMatchIndex represents an index in the array of futureMatches\n\n  MatchPage has three props: currentLogin, futureMatches, setMode.\n  -currentLogin is an object that stores the account information for the person who is currently logged in.\n  -futureMatches is an array of objects that store the acccount information of the artists that currentLogin could potentially match with\n  -setMode is a callback that updates the state of mode in App.js.\n\n\n*/\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport data from '../../public/sounderUsers.json';\n\nimport UserDetail from './UserDetail.js';\nimport Grid from 'react-bootstrap/lib/Grid.js';\nimport Row from 'react-bootstrap/lib/Row.js';\nimport Col from 'react-bootstrap/lib/Col.js';\nimport Button from 'react-bootstrap/lib/Button.js';\n\n\nclass MatchPage extends Component{\n  constructor(props){\n    super(props);\n\n    this.state = {\n      futureMatchIndex:0\n\n    };\n  }\n\n\n  handleNext(){\n    this.setState({futureMatchIndex: (this.state.futureMatchIndex + 1)});\n  }\n\n  handleLike(){\n    for (let pair of this.props.likeData){\n      // Don't know if this is necessary, but will catch duplicate likes\n      if ((pair.user1_id === this.props.currentLogin.id) && (pair.liked_id === this.props.futureMatches[this.state.futureMatchIndex].id)){\n        console.log(\"This user has already been liked, will not record!\")\n        this.handleNext();\n        return;\n      }\n    }\n    this.props.returnLike(this.props.futureMatches[this.state.futureMatchIndex].id);\n    this.checkMatch()\n    this.handleNext();\n\n  }\n\n  // Helper function, checks to see if the \"like\" occurs in the reverse direction, meaning we have a match\n  checkMatch(){\n    for (let pair of this.props.likeData){\n      if ((pair.user_id === this.props.futureMatches[this.state.futureMatchIndex].id) && (pair.liked_id === this.props.currentLogin.id)){\n        console.log(\"we foudn a new match!\");\n        alert(\"You just matched with \" + this.props.futureMatches[this.state.futureMatchIndex].username + \"!\")\n        this.props.returnMatch(this.props.futureMatches[this.state.futureMatchIndex].id)\n      }\n    }\n  }\n\n  render(){\n    if(this.props.futureMatches.length > 0){\n      return(\n        <Grid>\n          <Row bsClass=\"topRow\">\n            <Col><UserDetail currentLogin={this.props.futureMatches[this.state.futureMatchIndex]}/></Col>\n          </Row>\n          <Row>\n            <Col>\n              <Button onClick={()=>this.handleNext()} value=\"Next\">Next</Button>\n              <Button onClick={()=>this.handleLike()} value=\"Like\">Like</Button>\n            </Col>\n          </Row>\n        </Grid>\n\n\n      );\n\n    } else {\n      return(\n        <div><p>Sorry, there is no one to match with!</p></div>\n      )\n\n    }\n\n  }\n}\n\n\n\nexport default MatchPage;\n"}],"errorCount":0,"warningCount":2}},"src/Components/SignUpPage.js":{"hash":"f2e7dec3501b156ba35abc8c41ec6524","res":{"results":[{"filePath":"/Users/jessieyorke/Documents/cs312/Sounder/frontEnd/src/Components/SignUpPage.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Form' is defined but never used.","line":13,"column":8,"nodeType":"Identifier","source":"import Form from 'react-bootstrap/lib/Form.js';"},{"ruleId":"no-unused-vars","severity":1,"message":"'FormGroup' is defined but never used.","line":14,"column":8,"nodeType":"Identifier","source":"import FormGroup from 'react-bootstrap/lib/FormGroup.js';"},{"ruleId":"no-unused-vars","severity":1,"message":"'FormControl' is defined but never used.","line":15,"column":8,"nodeType":"Identifier","source":"import FormControl from 'react-bootstrap/lib/FormControl.js';"},{"ruleId":"no-unused-vars","severity":1,"message":"'ControlLabel' is defined but never used.","line":16,"column":8,"nodeType":"Identifier","source":"import ControlLabel from 'react-bootstrap/lib/ControlLabel.js';"},{"ruleId":"no-unused-vars","severity":1,"message":"'Checkbox' is defined but never used.","line":17,"column":8,"nodeType":"Identifier","source":"import Checkbox from 'react-bootstrap/lib/Checkbox.js';"},{"ruleId":"no-unused-vars","severity":1,"message":"'Col' is defined but never used.","line":22,"column":8,"nodeType":"Identifier","source":"import Col from 'react-bootstrap/lib/Col.js';"},{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used.","line":23,"column":8,"nodeType":"Identifier","source":"import Button from 'react-bootstrap/lib/Button.js';"},{"ruleId":"array-callback-return","severity":1,"message":"Expected to return a value in this function.","line":180,"column":31,"nodeType":"FunctionExpression","source":"  Object.keys(newUserObj).map(function(key){ //checks that all fields complete"},{"ruleId":"no-unused-vars","severity":1,"message":"'genresInput' is assigned a value but never used.","line":199,"column":7,"nodeType":"Identifier","source":"  let genresInput = (<Input  placeholder=\"genre (later dropdown)\" type=\"text\" value={this.state.genres} onChange={(event)=>{this.handleGenres(event)}}/>);"}],"errorCount":0,"warningCount":9,"source":"/*\n  LoginPage.js\n\n  This provides the implementation for the login component.\n\n  LoginPage maintains state in the form of username.\n\n  LoginPage has one prop: setProfile. setProfile is a callback function that updates the state in App.js of currentUser to be the username and the mode to be the home page.\n\n*/\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Form from 'react-bootstrap/lib/Form.js';\nimport FormGroup from 'react-bootstrap/lib/FormGroup.js';\nimport FormControl from 'react-bootstrap/lib/FormControl.js';\nimport ControlLabel from 'react-bootstrap/lib/ControlLabel.js';\nimport Checkbox from 'react-bootstrap/lib/Checkbox.js';\nimport DropdownButton from 'react-bootstrap/lib/DropdownButton.js';\nimport MenuItem from 'react-bootstrap/lib/MenuItem.js';\n\n\nimport Col from 'react-bootstrap/lib/Col.js';\nimport Button from 'react-bootstrap/lib/Button.js';\n\n\n\n\n\nconst LoginPage = styled.div`\n  text-align: center;\n  margin-top: 100px;\n  height: 50%;\n`;\n\nconst UsernameInput = styled.div`\n  background-color: #FF7700; /* orange  */\n  position: relative;\n  padding: 10px;\n  font-size: 16px;\n  height:50;\n  width: 300px;\n  display: inline-block;\n`;\n\n\n\nconst LoginButton = styled.div`\n  background-color: #525252; /* Green */\n  border: none;\n  color: white;\n  padding: 10px 20px 10px 20px;\n  cursor: pointer;\n  border-radius: 28px;\n  margin-right: 10px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  margin-top: 10px;\n  &:hover {\n   background-color:#FF7700;\n }\n\n`;\n\nconst SounderHeader = styled.div`\n  font-size: 3.0em;\n  font-weight: bold;\n  font-variant: small-caps;\n  color:#525252;\n`;\n\nconst Input = styled.input`\n  width:200px;\n  height:25px;\n\n`;\n\nclass SignUp extends Component{\n  constructor(){\n    super();\n    this.state = {\n      id: '',\n      username: '',\n      password: '',\n      song1: '',\n      song2: '',\n      song3: '',\n      profileURL: '',\n      genres: '', //make this an array later\n      numFollowers: '',\n      photoURL: '',\n      email: ''\n\n    }\n  };\n\n\n\nhandleUsername(inputEvent){\n  this.setState({username: inputEvent.target.value});\n}\n\nhandlePassword(inputEvent){\n  this.setState({password: inputEvent.target.value});\n}\n\nhandleSong1(inputEvent){\n  this.setState({song1: inputEvent.target.value});\n}\n\nhandleSong2(inputEvent){\n  this.setState({song2: inputEvent.target.value});\n}\n\nhandleSong3(inputEvent){\n  this.setState({song3: inputEvent.target.value});\n}\n\nhandleProfileURL(inputEvent){\n  this.setState({profileURL: inputEvent.target.value});\n}\n\nhandleNumFollowers(inputEvent){\n  this.setState({numFollowers: inputEvent.target.value});\n}\n\nhandleGenres(inputEvent){ //make this an array handler later\n  this.setState({genres: inputEvent.target.value});\n}\n\nhandlePhotoURL(inputEvent){\n  this.setState({photoURL: inputEvent.target.value});\n\n}\n\nhandleEmail(inputEvent){\n  this.setState({email: inputEvent.target.value});\n}\n\n\n\n\n/*\n ********************************************************************\n User Object Creation: put all standardized property conventions here\n ********************************************************************\n*/\n\ncreateUser(){ //creates the actual user object\n  let newUserObj = {\n  username: this.state.username,\n  password: this.state.password,\n  song1: this.state.song1,\n  song2: this.state.song2,\n  song3: this.state.song3,\n  profileURL: this.state.profileURL,\n  genre: [this.state.genres], //make this an array later\n  numFollowers: this.state.numFollowers,\n  profilePicture: this.state.photoURL,\n  email: this.state.email,\n  karma: 0\n\n  /* How to handle these? */\n\n  //id:\n  //followers:\n  //id;\n  //followers: //who follows the user\n  //following: //who the user follows\n  //followerRange:\n  //peopleYouLike:\n  //peopleWhoLikedYou:\n  //currentMatches:\n  //pastMatches:\n  //online:\n  }\n\n  let complete = true;\n  Object.keys(newUserObj).map(function(key){ //checks that all fields complete\n    if (newUserObj[key] === \"\"){\n      complete = false;\n      alert(\"please fill out the \" + key + \" section\");\n    }\n  })\n  if (complete === true){\n    this.props.newUser(newUserObj);\n  }\n}\n\nrender() {\n  let usernameInput = (<Input  placeholder=\"Username\" type=\"text\" value={this.state.username} onChange={(event)=>{this.handleUsername(event)}}/>);\n  let passwordInput = (<Input  placeholder=\"Password\" type=\"text\" value={this.state.password} onChange={(event)=>{this.handlePassword(event)}}/>);\n  let song1Input = (<Input  placeholder=\"Song 1 URL\" type=\"text\" value={this.state.song1} onChange={(event)=>{this.handleSong1(event)}}/>);\n  let song2Input = (<Input  placeholder=\"Song 2 URL\" type=\"text\" value={this.state.song2} onChange={(event)=>{this.handleSong2(event)}}/>);\n  let song3Input = (<Input  placeholder=\"Song 3 URL\" type=\"text\" value={this.state.song3} onChange={(event)=>{this.handleSong3(event)}}/>);\n  let profileURLInput = (<Input  placeholder=\"Soundcloud Profile URL\" type=\"text\" value={this.state.profileURL} onChange={(event)=>{this.handleProfileURL(event)}}/>);\n  let numFollowersInput = (<Input  placeholder=\"# of SC Followers\" type=\"text\" value={this.state.numFollowers} onChange={(event)=>{this.handleNumFollowers(event)}}/>);\n  let genresInput = (<Input  placeholder=\"genre (later dropdown)\" type=\"text\" value={this.state.genres} onChange={(event)=>{this.handleGenres(event)}}/>);\n  let photoURLInput = (<Input  placeholder=\"Photo URL\" type=\"text\" value={this.state.photoURL} onChange={(event)=>{this.handlePhotoURL(event)}}/>);\n  let emailInput = (<Input  placeholder=\"Email\" type=\"text\" value={this.state.email} onChange={(event)=>{this.handleEmail(event)}}/>);\n\n  let genreOps = [\"Alternative Rock\", \"Ambient\", \"Classical\", \"Country\", \"Dance & EDM\", \"Dancehall\", \"Deep House\",\n  \"Disco\", \"Drum & Bass\", \"Dubstep\", \"Electronic\", \"Folk & Singer-Songwriter\", \"Hip-Hop & Rap\", \"House\", \"Indie\", \"Jazz & Blues\", \"Latin\",\n  \"Metal\", \"Piano\", \"Pop\", \"R&B & Soul\", \"Reggae\", \"Reggaeton\", \"Rock\", \"Soundtrack\", \"Techno\", \"Trance\", \"Trap\", \"Triphop\", \"World\"]\n  let counter = 0;\n  const genrelist = (genreOps).map((genrei)=>{ //creates a genrelist that is displayed in the \"Genre\" dropdown\n    counter += 1;\n    return (<MenuItem eventKey={counter} onClick={()=>{console.log(genrei)}}> {genrei} </MenuItem>);});\n\n  let genre = (<DropdownButton title='Genres' id='genre-dropdown' onChange={(event)=>{this.handleGenres(event)}}>\n            {genrelist}\n            </DropdownButton>)\n\n  let signUp = (<LoginButton onClick={()=>this.createUser()}>Sign Up</LoginButton>);\n  let cancel = (<LoginButton onClick={()=>this.props.switchToLogin()} >Cancel</LoginButton>);\n\n\n    return(\n      <LoginPage>\n        <SounderHeader>\n        Sounder\n        </SounderHeader>\n        <UsernameInput>\n          {usernameInput}\n        </UsernameInput>\n\n        <div>\n          <UsernameInput>\n            {passwordInput}\n          </UsernameInput>\n        </div>\n\n        <div>\n          <UsernameInput>\n            {song1Input}\n            {song2Input}\n            {song3Input}\n          </UsernameInput>\n        </div>\n\n        <div>\n          <UsernameInput>\n            {profileURLInput}\n          </UsernameInput>\n        </div>\n\n        <div>\n          <UsernameInput>\n            {numFollowersInput}\n          </UsernameInput>\n        </div>\n\n        <div>\n          <UsernameInput>\n            {genre}\n          </UsernameInput>\n        </div>\n\n        <div>\n          <UsernameInput>\n            {photoURLInput}\n          </UsernameInput>\n        </div>\n\n        <div>\n          <UsernameInput>\n            {emailInput}\n          </UsernameInput>\n        </div>\n\n        <div>\n        {signUp}\n        {cancel}\n        </div>\n        </LoginPage>\n\n      );\n\n}\n}\nexport default SignUp;\n"}],"errorCount":0,"warningCount":9}},"src/Components/LoginPage.js":{"hash":"4d6590d0b6d565b7b28dbb950e4fa427","res":{"results":[{"filePath":"/Users/jessieyorke/Documents/cs312/Sounder/frontEnd/src/Components/LoginPage.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Form' is defined but never used.","line":13,"column":8,"nodeType":"Identifier","source":"import Form from 'react-bootstrap/lib/Form.js';"},{"ruleId":"no-unused-vars","severity":1,"message":"'FormGroup' is defined but never used.","line":14,"column":8,"nodeType":"Identifier","source":"import FormGroup from 'react-bootstrap/lib/FormGroup.js';"},{"ruleId":"no-unused-vars","severity":1,"message":"'FormControl' is defined but never used.","line":15,"column":8,"nodeType":"Identifier","source":"import FormControl from 'react-bootstrap/lib/FormControl.js';"},{"ruleId":"no-unused-vars","severity":1,"message":"'ControlLabel' is defined but never used.","line":16,"column":8,"nodeType":"Identifier","source":"import ControlLabel from 'react-bootstrap/lib/ControlLabel.js';"},{"ruleId":"no-unused-vars","severity":1,"message":"'Checkbox' is defined but never used.","line":17,"column":8,"nodeType":"Identifier","source":"import Checkbox from 'react-bootstrap/lib/Checkbox.js';"},{"ruleId":"no-unused-vars","severity":1,"message":"'Col' is defined but never used.","line":20,"column":8,"nodeType":"Identifier","source":"import Col from 'react-bootstrap/lib/Col.js';"},{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used.","line":21,"column":8,"nodeType":"Identifier","source":"import Button from 'react-bootstrap/lib/Button.js';"},{"ruleId":"eqeqeq","severity":1,"message":"Expected '===' and instead saw '=='.","line":116,"column":23,"nodeType":"BinaryExpression","source":"  if (this.state.mode == 'login'){"},{"ruleId":"eqeqeq","severity":1,"message":"Expected '===' and instead saw '=='.","line":139,"column":23,"nodeType":"BinaryExpression","source":"  if (this.state.mode == 'signUp'){"}],"errorCount":0,"warningCount":9,"source":"/*\n  LoginPage.js\n\n  This provides the implementation for the login component.\n\n  LoginPage maintains state in the form of username.\n\n  LoginPage has one prop: setProfile. setProfile is a callback function that updates the state in App.js of currentUser to be the username and the mode to be the home page.\n\n*/\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Form from 'react-bootstrap/lib/Form.js';\nimport FormGroup from 'react-bootstrap/lib/FormGroup.js';\nimport FormControl from 'react-bootstrap/lib/FormControl.js';\nimport ControlLabel from 'react-bootstrap/lib/ControlLabel.js';\nimport Checkbox from 'react-bootstrap/lib/Checkbox.js';\n\n\nimport Col from 'react-bootstrap/lib/Col.js';\nimport Button from 'react-bootstrap/lib/Button.js';\n\n\n\n\n\nconst LoginPage = styled.div`\n  text-align: center;\n  margin-top: 100px;\n  height: 50%;\n`;\n\nconst UsernameInput = styled.div`\n  background-color: #FF7700; /* orange  */\n  position: relative;\n  padding: 10px;\n  font-size: 16px;\n  height:50;\n  width: 300px;\n  display: inline-block;\n`;\n\n\n\nconst LoginButton = styled.div`\n  background-color: #525252; /* Green */\n  border: none;\n  color: white;\n  padding: 10px 20px 10px 20px;\n  cursor: pointer;\n  border-radius: 28px;\n  margin-right: 10px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  margin-top: 10px;\n  &:hover {\n   background-color:#FF7700;\n }\n\n`;\n\nconst SounderHeader = styled.div`\n  font-size: 3.0em;\n  font-weight: bold;\n  font-variant: small-caps;\n  color:#525252;\n`;\n\nconst Input = styled.input`\n  width:200px;\n  height:25px;\n\n`;\n\nclass Login extends Component{\n  constructor(){\n    super();\n    this.state = {\n      mode: 'login',\n      username: '',\n      password: ''\n    }\n  };\n\n\n\nhandleUsername(inputEvent){\n  this.setState({username: inputEvent.target.value});\n}\n\nhandlePassword(inputEvent){\n  this.setState({password: inputEvent.target.value});\n}\n\nrender() {\n  // let usernameInput = (<Input  type=\"text\" value={this.state.username} onChange={(event)=>{this.handleUsername(event)}}/>);\n  // let passwordInput = (<Input  type=\"text\" value={this.state.password} onChange={(event)=>{this.handlePassword(event)}}/>);\n  // let signIn = (<LoginButton onClick={()=>this.props.setProfile(this.state.username)}>Sign In</LoginButton>);\n  // let createAccount = (<LoginButton onClick={()=>this.setState({mode:'signUp'})}>Create Account</LoginButton>);\n  // let signUp = (<LoginButton onClick={()=>this.props.newUser(this.state.username,this.state.password)}>Sign Up</LoginButton>);\n  // let cancel = (<LoginButton onClick={()=>this.setState({mode:'login'})} >Cancel</LoginButton>);\n\n\n  let usernameInput = (<Input  placeholder=\"Username\" type=\"text\" value={this.state.username} onChange={(event)=>{this.handleUsername(event)}}/>);\n  let passwordInput = (<Input  placeholder=\"Password\" type=\"text\" value={this.state.password} onChange={(event)=>{this.handlePassword(event)}}/>);\n  let signIn = (<LoginButton onClick={()=>this.props.setProfile(this.state.username)}>Sign In</LoginButton>);\n  let createAccount = (<LoginButton onClick={()=>{this.props.switchToSignUp(); console.log(\"go to signup!!\")}}>Create Account</LoginButton>);\n\n\n\n\n\n\n  if (this.state.mode == 'login'){\n    return(\n      <LoginPage>\n        <SounderHeader>\n        Sounder\n        </SounderHeader>\n        <UsernameInput>\n          {usernameInput}\n        </UsernameInput>\n        <div>\n          <UsernameInput>\n            {passwordInput}\n          </UsernameInput>\n        </div>\n        <div>\n          {signIn}\n          {createAccount}\n        </div>\n        </LoginPage>\n\n      );\n  }\n\n  if (this.state.mode == 'signUp'){\n    return(\n      <LoginPage>\n        <SounderHeader>\n        Sounder\n        </SounderHeader>\n        <UsernameInput>\n          {usernameInput}\n        </UsernameInput>\n        <div>\n          <UsernameInput>\n            {passwordInput}\n          </UsernameInput>\n        </div>\n        <div>\n        {signIn}\n        {createAccount}\n        </div>\n        </LoginPage>\n\n      );\n  }\n}\n}\nexport default Login;\n"}],"errorCount":0,"warningCount":9}},"src/Components/NavBar.js":{"hash":"11870db95c5832a84b521debb26a4285","res":{"results":[{"filePath":"/Users/jessieyorke/Documents/cs312/Sounder/frontEnd/src/Components/NavBar.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Component' is defined but never used.","line":1,"column":17,"nodeType":"Identifier","source":"import React, { Component } from 'react';"}],"errorCount":0,"warningCount":1,"source":"import React, { Component } from 'react';\nimport Navbar from 'react-bootstrap/lib/Navbar.js';\nimport NavItem from 'react-bootstrap/lib/NavItem.js';\nimport Nav from 'react-bootstrap/lib/Nav.js';\nimport NavDropdown from 'react-bootstrap/lib/NavDropdown.js';\nimport MenuItem from 'react-bootstrap/lib/MenuItem.js';\n\n\n\n\n\nfunction NavBar(props){\n  return(\n    <Navbar inverse collapseOnSelect>\n      <Navbar.Header>\n        <Navbar.Brand>\n          <a href=\"#\">Sounder</a>\n        </Navbar.Brand>\n        <Navbar.Toggle />\n      </Navbar.Header>\n      <Navbar.Collapse>\n        <Nav>\n          <NavItem onClick={()=>props.setMode('home')} eventKey={1} href=\"#\">Home</NavItem>\n        </Nav>\n        <Nav pullRight>\n          <NavItem onClick={()=>props.setMode('matching')} eventKey={2} href=\"#\">Start Matching</NavItem>\n          <NavDropdown eventKey={3} title=\"Account\" id=\"basic-nav-dropdown\">\n            <MenuItem onClick={()=>props.setMode('settings')} eventKey={3.1}>Settings</MenuItem>\n            <MenuItem divider />\n            <MenuItem onClick={()=>props.setMode('login')} eventKey={3.3}>Logout</MenuItem>\n          </NavDropdown>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  )\n}\n\n\nexport default NavBar;\n"}],"errorCount":0,"warningCount":1}},"src/Components/MatchDetailPage.js":{"hash":"bd24038a09445378383e4b645a5fc0fc","res":{"results":[{"filePath":"/Users/jessieyorke/Documents/cs312/Sounder/frontEnd/src/Components/MatchDetailPage.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Component' is defined but never used.","line":20,"column":17,"nodeType":"Identifier","source":"import React, { Component } from 'react';"},{"ruleId":"no-unused-vars","severity":1,"message":"'styled' is defined but never used.","line":21,"column":8,"nodeType":"Identifier","source":"import styled from 'styled-components';"},{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used.","line":27,"column":8,"nodeType":"Identifier","source":"import Button from 'react-bootstrap/lib/Button.js';"}],"errorCount":0,"warningCount":3,"source":"/*\n  MatchDetailPage.js\n\n  This provides the implementation for the Match Detail Page component.\n\n  MatchDetailPage does not maintain its own state.\n\n  MatchDetailPage takes in four props: clickMatch, matchlist, currentMatch, setMode\n  -clickMatch is a callback function to be passedin as props to the functional component MatchLog.\n  -matchlist is an array of objects that needs to be passed into the functional component.\n  -currentMatch is the current profile being displayed in MatchDetailPage\n  -setMode is a callback that updates the state of mode in App.js.\n\n\n  MatchDetailPage uses two other functional components: UserDetail and MatchLog. UserDetail represents the user\n  profile of whoever is currently logged in. MatchLog represents the list of Artists currentLogin has already matched with.\n\n*/\n\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport UserDetail from './UserDetail.js';\nimport MatchLog from './MatchLog.js';\nimport Grid from 'react-bootstrap/lib/Grid.js';\nimport Row from 'react-bootstrap/lib/Row.js';\nimport Col from 'react-bootstrap/lib/Col.js';\nimport Button from 'react-bootstrap/lib/Button.js';\n\n\n\n\nfunction MatchDetailPage(props){\n\n    return (\n      <Grid>\n        <Row bsClass=\"topRow\">\n          <Col lg={3}>\n            <MatchLog clickMatch={(match)=>props.clickMatch(match)} matchlist={props.matchlist} />\n          </Col>\n          <Col lg={9}>\n            <UserDetail currentLogin={props.currentMatch} profileLink={props.currentMatch.profileURL}/>\n          </Col>\n        </Row>\n      </Grid>\n    )\n\n}\n\n\nexport default MatchDetailPage;\n"}],"errorCount":0,"warningCount":3}},"src/Components/MatchingSettingsPage.js":{"hash":"a05f935e33f78da9ed7e12695d1aa6cb","res":{"results":[{"filePath":"/Users/jessieyorke/Documents/cs312/Sounder/frontEnd/src/Components/MatchingSettingsPage.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/Components/UserDetail.js":{"hash":"490899f8848369c55e8462fd8ba2cb79","res":{"results":[{"filePath":"/Users/jessieyorke/Documents/cs312/Sounder/frontEnd/src/Components/UserDetail.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used.","line":17,"column":8,"nodeType":"Identifier","source":"import Button from 'react-bootstrap/lib/Button.js';"}],"errorCount":0,"warningCount":1,"source":"/*\nUserDetail.js\n\nUserDetail takes in one prop: currentLogin\n-currentLogin is an object that stores the account information for the person who is currently logged in.\n\n*/\n\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Grid from 'react-bootstrap/lib/Grid.js';\nimport Row from 'react-bootstrap/lib/Row.js';\nimport Col from 'react-bootstrap/lib/Col.js';\nimport Modal from 'react-bootstrap/lib/Modal.js';\nimport Image from 'react-bootstrap/lib/Image.js';\nimport EmbedSong from './EmbedSong.js';\nimport Button from 'react-bootstrap/lib/Button.js';\n\nconst UsernameRow = styled(Row)`\n  color: #ff7700;\n  font-size: 24px;\n  padding: 0;\n`;\n\nconst UserDetailRow = styled(Row)`\n  font-weight: bold;\n`;\n\nconst LoginButton = styled.div`\n  background-color: #525252; /* Green */\n  border: none;\n  color: white;\n  padding: 10px 20px 10px 20px;\n  cursor: pointer;\n  border-radius: 28px;\n  margin-right: 10px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  margin-top: 10px;\n  &:hover {\n   background-color:#FF7700;\n }\n\n`;\n\n\nclass UserDetail extends Component{\n  constructor(props){\n    super(props);\n\n    this.state = {\n      showModal: false\n    };\n  }\n\n\nrender(){\n\n  let profilePicture = (<Image src={this.props.currentLogin.profilePictureURL}  circle bsStyle=\"margin:10px;\" width=\"114px\" height=\"114px\" />)\n  let basicUserInfo = (<div>\n                       <UsernameRow >{this.props.currentLogin['username']}</UsernameRow>\n                       <UserDetailRow>Genre: {this.props.currentLogin['genre']}</UserDetailRow>\n                       <UserDetailRow>Karma Rating: {this.props.currentLogin['karma']}</UserDetailRow>\n                       <UserDetailRow>Followers: {this.props.currentLogin['numFollowers']}</UserDetailRow>\n                       </div>)\n  let songs = (<div>\n              <EmbedSong songURL={this.props.currentLogin.song1} ></EmbedSong>\n              <EmbedSong songURL={this.props.currentLogin.song2}></EmbedSong>\n              <EmbedSong songURL={this.props.currentLogin.song3}></EmbedSong>\n              </div>)\n\n  let closeModal = () => this.setState({ showModal: false })\n\n  let repostModal = (<Modal show={this.state.showModal} onHide={closeModal} container={this} aria-labelledby=\"contained-modal-title\">\n                        <Modal.Header closeButton>\n                          <Modal.Title id=\"contained-modal-title\">Repost one of your Matchs Songs!</Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            <p> To repost a song, simply click on the orange SoundCloud icon in the top left corner of the song widget.\n                            This will bring you to a page which will allow you to directly repost on SoundCloud.</p>\n                            <h4> Dont Forget to Repost! </h4>\n                            <p>Make sure you remember to repost, otherwise your match will give you a bad karma rating. </p>\n                        </Modal.Body>\n                      </Modal>);\n\n    let goToProfile = (<LoginButton onClick={()=>(window.open(this.props.currentLogin.profileURL))}>Visit SoundCloud Profile</LoginButton>)\n    let repostModalButton = (<LoginButton onClick={() => this.setState({ showModal: true})}>How do I repost a Song?</LoginButton>)\n\n    /*Checks to see if the User is looking at MatchDetailPage*/\n    if(this.props.profileLink){\n        return(\n        <Grid>\n            <Row bsClass=\"padded\">\n              <div className=\"modal-container\">\n                      {goToProfile}\n                      {repostModalButton}\n                      {repostModal}\n              </div>\n            </Row>\n            <Row>\n              <Col lg={2} sm={2} >\n                {profilePicture}\n              </Col>\n              <Col lg={7} sm={3} >\n              <Grid>\n                {basicUserInfo}\n              </Grid>\n              </Col>\n            </Row>\n              <Col lg={9}>\n                {songs}\n              </Col>\n          </Grid>\n        )\n    }\n      /*User is currently looking at their own profile so doesn't need link to profile button or repost Modal*/\n      else{\n        return(\n          <Grid>\n            <Row>\n              <Col lg={2} sm={2} >\n                {profilePicture}\n              </Col>\n              <Col lg={7} sm={3} >\n              <Grid>\n                {basicUserInfo}\n              </Grid>\n              </Col>\n            </Row>\n              <Col lg={9}>\n                {songs}\n              </Col>\n          </Grid>\n        )\n      }\n\n   }\n};\n\n  export default UserDetail;\n"}],"errorCount":0,"warningCount":1}},"src/Components/MatchLog.js":{"hash":"afa10b307b757e65f3c09afd9683d551","res":{"results":[{"filePath":"/Users/jessieyorke/Documents/cs312/Sounder/frontEnd/src/Components/MatchLog.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Component' is defined but never used.","line":14,"column":17,"nodeType":"Identifier","source":"import React, { Component } from 'react';"},{"ruleId":"no-unused-vars","severity":1,"message":"'Panel' is defined but never used.","line":19,"column":8,"nodeType":"Identifier","source":"import Panel from 'react-bootstrap/lib/Panel.js';"},{"ruleId":"no-unused-vars","severity":1,"message":"'ButtonGroup' is defined but never used.","line":20,"column":8,"nodeType":"Identifier","source":"import ButtonGroup from 'react-bootstrap/lib/ButtonGroup.js';"},{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used.","line":21,"column":8,"nodeType":"Identifier","source":"import Button from 'react-bootstrap/lib/Button.js';"}],"errorCount":0,"warningCount":4,"source":"/*\n\nMatchLog.js\n\nMatchLog takes in 2 props: matchlist and clickMatch\n-matchlist is an array of objects that store the acccount information\nof the artists that currentLogin has matched with\n-clickMatch is a callback function that updates the state of mode and currentMatch in App.js\n\n\n*/\n\n\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Grid from 'react-bootstrap/lib/Grid.js';\nimport Row from 'react-bootstrap/lib/Row.js';\nimport Col from 'react-bootstrap/lib/Col.js';\nimport Panel from 'react-bootstrap/lib/Panel.js';\nimport ButtonGroup from 'react-bootstrap/lib/ButtonGroup.js';\nimport Button from 'react-bootstrap/lib/Button.js';\nimport ListGroup from 'react-bootstrap/lib/ListGroup.js';\nimport ListGroupItem from 'react-bootstrap/lib/ListGroupItem.js';\nimport '../index.css';\nimport Popover from 'react-bootstrap/lib/Popover.js';\nimport OverlayTrigger from 'react-bootstrap/lib/OverlayTrigger.js';\n\nconst CenteredTitle=styled.h1`\n  font-weight: bold;\n  text-align: center;\n  border-bottom: 2px solid #ff4b00;\n`;\n\nconst MatchName = styled(ListGroupItem)`\n  color: black;\n  font-size: 16px;\n  curson: pointer;\n  &:hover {\n   color: #FF7700;\n }\n\n`;\n\nconst MatchNameStyle = styled(Col)`\n curson: pointer;\n  &:hover {\n   color: #FF7700;\n }\n`\n\nconst MatchPreview = styled(Popover)`\n  width: 400px;\n\n`\n\n\nfunction MatchLog(props){\n  const matchlog = (props.matchlist).map((user)=>{\n    let name = user.username;\n    const popoverHoverFocus = (\n    <MatchPreview id=\"popover-trigger-hover-focus\" title={name}  positionLeft={200}\n      positionTop={50}>\n      <p><strong>Genre</strong> {user.genre}</p>\n      <p><strong>Followers</strong> {user.numFollowers}</p>\n      <p><strong>Karma</strong> {user.karma}</p>\n    </MatchPreview>\n  );\n    return (\n        <MatchName key={name} value={name} onClick={()=>{console.log(user);props.clickMatch(user)}}>\n          <OverlayTrigger trigger={['hover', 'focus']} placement=\"top\" overlay={popoverHoverFocus} arrowOffsetLeft='40px'>\n            <MatchNameStyle lg={2}>{name}</MatchNameStyle>\n          </OverlayTrigger>\n        </MatchName>\n    );\n  });\n\n  return (\n    <Grid>\n      <Row>\n        <Col lg={2}><CenteredTitle>Matches</CenteredTitle></Col>\n      </Row>\n      <Row>\n        <Col lg={2}>\n          <ListGroup>{matchlog}</ListGroup>\n        </Col>\n      </Row>\n    </Grid>\n  );\n};\n\nexport default MatchLog;\n"}],"errorCount":0,"warningCount":4}},"src/Components/EmbedSong.js":{"hash":"82adc6e240fdc84163c781f6055b6446","res":{"results":[{"filePath":"/Users/geoffreyziobro/Documents/software_dev/Sounder/frontEnd/src/Components/EmbedSong.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}}}